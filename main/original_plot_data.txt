# Lander
#     ( 1.0010919540229886 , 1.3571428571428572 , 0.5714285714285714 )
#     ( 1.0020689655172415 , 4.0 , 1.4642857142857142 )
#     ( 1.004109195402299 , 5.5 , 2.2857142857142856 )
#     ( 1.0060344827586207 , 9.0 , 1.7142857142857142 )
#     ( 1.009051724137931 , 12.214285714285714 , 3.392857142857143 )
#     ( 1.0110919540229886 , 12.785714285714286 , 4.107142857142857 )
# Hopper
#     ( 1.0010632183908046 , 0.36936936936936937 , 0.17117117117117117 )
#     ( 1.0020402298850575 , 2.009009009009009 , 0.17117117117117117 )
#     ( 1.004080459770115 , 3.09009009009009 , 0.32432432432432434 )
#     ( 1.0060344827586207 , 3.6666666666666665 , 0.36036036036036034 )
#     ( 1.0090229885057471 , 3.7567567567567566 , 0.5225225225225225 )
#     ( 1.0110632183908046 , 3.900900900900901 , 0.36936936936936937 )
# Ant
#     ( 1.0010632183908046 , 0.35135135135135137 , 0.17117117117117117 )
#     ( 1.0020402298850575 , 1.2982456140350878 , 0.2543859649122807 )
#     ( 1.004080459770115 , 2.210526315789474 , 0.30701754385964913 )
#     ( 1.0060344827586207 , 2.719298245614035 , 0.5789473684210527 )
#     ( 1.0090229885057471 , 2.8947368421052633 , 0.7105263157894737 )
#     ( 1.0110632183908046 , 3.3508771929824563 , 0.8508771929824561 )
# Humanoid
#     ( 1.0010174418604652 , 0.12195121951219512 , 0.06097560975609756 )
#     ( 1.0020639534883722 , 0.5182926829268293 , 0.17073170731707318 )
#     ( 1.0040406976744185 , 0.8902439024390244 , 0.31097560975609756 )
#     ( 1.0061046511627907 , 0.9024390243902439 , 0.4481707317073171 )
#     ( 1.0091279069767443 , 1.0 , 0.3719512195121951 )
#     ( 1.0111046511627908 , 1.0975609756097562 , 0.36585365853658536 )
# Cheetah 
#     ( 1.0011046511627908 , 0.2634730538922156 , 0.1317365269461078 )
#     ( 1.0020348837209303 , 1.437125748502994 , 0.1317365269461078 )
#     ( 1.0040116279069768 , 2.179640718562874 , 0.3473053892215569 )
#     ( 1.006046511627907 , 2.311377245508982 , 0.31137724550898205 )
#     ( 1.0090988372093024 , 2.467065868263473 , 0.38922155688622756 )
#     ( 1.0111046511627908 , 2.179640718562874 , 0.5808383233532934 )
# Walker
#     ( 1.0010174418604652 , 0.04597701149425287 , -0.06896551724137931 )
#     ( 1.0035755813953489 , 1.2413793103448276 , -0.06896551724137931 )
#     ( 1.0061046511627907 , 1.5632183908045978 , 0.005747126436781609 )
#     ( 1.0086046511627906 , 1.8045977011494252 , 0.005747126436781609 )
#     ( 1.0111046511627908 , 0.16091954022988506 , 0.06321839080459771 )

# AFRL on  frozen-env [?] 
# ➜ python ./main/original_plot_data.txt
# Lander
#     ( 1.0010919540229886 , 1.3571428571428572 , 0.5714285714285714 )
#     ( 1.0020689655172415 , 4.0 , 1.4642857142857142 )
#     ( 1.004109195402299 , 5.5 , 2.2857142857142856 )
#     ( 1.0060344827586207 , 9.0 , 1.7142857142857142 )
#     ( 1.009051724137931 , 12.214285714285714 , 3.392857142857143 )
#     ( 1.0110919540229886 , 12.785714285714286 , 4.107142857142857 )
# Hopper
#     ( 1.0010632183908046 , 0.36936936936936937 , 0.17117117117117117 )
#     ( 1.0020402298850575 , 2.009009009009009 , 0.17117117117117117 )
#     ( 1.004080459770115 , 3.09009009009009 , 0.32432432432432434 )
#     ( 1.0060344827586207 , 3.6666666666666665 , 0.36036036036036034 )
#     ( 1.0090229885057471 , 3.7567567567567566 , 0.5225225225225225 )
#     ( 1.0110632183908046 , 3.900900900900901 , 0.36936936936936937 )
# Ant
#     ( 1.0010632183908046 , 0.35135135135135137 , 0.17117117117117117 )
#     ( 1.0020402298850575 , 1.2982456140350878 , 0.2543859649122807 )
#     ( 1.004080459770115 , 2.210526315789474 , 0.30701754385964913 )
#     ( 1.0060344827586207 , 2.719298245614035 , 0.5789473684210527 )
#     ( 1.0090229885057471 , 2.8947368421052633 , 0.7105263157894737 )
#     ( 1.0110632183908046 , 3.3508771929824563 , 0.8508771929824561 )
# Humanoid
#     ( 1.0010174418604652 , 0.12195121951219512 , 0.06097560975609756 )
#     ( 1.0020639534883722 , 0.5182926829268293 , 0.17073170731707318 )
#     ( 1.0040406976744185 , 0.8902439024390244 , 0.31097560975609756 )
#     ( 1.0061046511627907 , 0.9024390243902439 , 0.4481707317073171 )
#     ( 1.0091279069767443 , 1.0 , 0.3719512195121951 )
#     ( 1.0111046511627908 , 1.0975609756097562 , 0.36585365853658536 )
# Cheetah 
#     ( 1.0011046511627908 , 0.2634730538922156 , 0.1317365269461078 )
#     ( 1.0020348837209303 , 1.437125748502994 , 0.1317365269461078 )
#     ( 1.0040116279069768 , 2.179640718562874 , 0.3473053892215569 )
#     ( 1.006046511627907 , 2.311377245508982 , 0.31137724550898205 )
#     ( 1.0090988372093024 , 2.467065868263473 , 0.38922155688622756 )
#     ( 1.0111046511627908 , 2.179640718562874 , 0.5808383233532934 )
# Walker
#     ( 1.0010174418604652 , 0.04597701149425287 , -0.06896551724137931 )
#     ( 1.0035755813953489 , 1.2413793103448276 , -0.06896551724137931 )
#     ( 1.0061046511627907 , 1.5632183908045978 , 0.005747126436781609 )
#     ( 1.0086046511627906 , 1.8045977011494252 , 0.005747126436781609 )
#     ( 1.0111046511627908 , 0.16091954022988506 , 0.06321839080459771 )



print("Lander")
x1 = (0.000, 19)
x2 = (0.010, 367)
y1 = (5, 64)
y2 = (15, 204)
pixel_ratio_y = abs((y1[1] - y2[1])/(y1[0] - y2[0]) )
y_offset = y1[1] - ((y1[0]-1)*pixel_ratio_y)
y_ = lambda y : (y + y_offset)/pixel_ratio_y

pixel_ratio = abs((x1[1] - x2[1])/(x1[0] - x2[0]) )
x_offset = x1[1] - ((x1[0]-1)*pixel_ratio)
x_ = lambda x : (x + x_offset)/pixel_ratio
print("    (", x_(19) , ",", y_(11)  ,",", y_(0)   , ")" )
print("    (", x_(53) , ",", y_(48)  ,",", y_(25/2), ")" )
print("    (", x_(124), ",", y_(69)  ,",", y_(48/2), ")" )
print("    (", x_(191), ",", y_(118) ,",", y_(32/2), ")" )
print("    (", x_(296), ",", y_(163) ,",", y_(79/2), ")" )
print("    (", x_(367), ",", y_(171) ,",", y_(99/2), ")" )

print("Hopper")
x1 = 0.000, 19
x2 = 0.010, 367
y1 = 2, 65
y2 = 4, 176
pixel_ratio_y = abs((y1[1] - y2[1])/(y1[0] - y2[0]) )
y_offset = y1[1] - ((y1[0]-1)*pixel_ratio_y)
y_ = lambda y : (y + y_offset)/pixel_ratio_y

pixel_ratio = abs((x1[1] - x2[1])/(x1[0] - x2[0]) )
x_offset = x1[1] - ((x1[0]-1)*pixel_ratio)
x_ = lambda x : (x + x_offset)/pixel_ratio
print("    (", x_(18) , ",",y_( 11)  ,",", y_(0)   , ")" )
print("    (", x_(52) , ",",y_( 102) ,",", y_(0)   , ")" )
print("    (", x_(123), ",", y_(162) ,",", y_(17/2), ")" )
print("    (", x_(191), ",", y_(194) ,",", y_(21/2), ")" )
print("    (", x_(295), ",", y_(199) ,",", y_(39/2), ")" )
print("    (", x_(366), ",", y_(207) ,",", y_(22/2), ")" )

print("Ant")
print("    (", x_(18), ",", y_(10)   ,",", y_(0)   , ")" )
x1 = 0.000, 19
x2 = 0.010, 367
y1 = 2, 68
y2 = 4, 182
pixel_ratio_y = abs((y1[1] - y2[1])/(y1[0] - y2[0]) )
y_offset = y1[1] - ((y1[0]-1)*pixel_ratio_y)
y_ = lambda y : (y + y_offset)/pixel_ratio_y

pixel_ratio = abs((x1[1] - x2[1])/(x1[0] - x2[0]) )
x_offset = x1[1] - ((x1[0]-1)*pixel_ratio)
x_ = lambda x : (x + x_offset)/pixel_ratio
print("    (", x_(52), ",", y_(63)   ,",", y_(7/2) , ")" )
print("    (", x_(123), ",", y_(115) ,",", y_(13/2), ")" )
print("    (", x_(191), ",", y_(144) ,",", y_(44/2), ")" )
print("    (", x_(295), ",", y_(154) ,",", y_(59/2), ")" )
print("    (", x_(366), ",", y_(180) ,",", y_(75/2), ")" )

print("Humanoid")
x1 = 0.000, 19
x2 = 0.010, 363
y1 = 1, 10
y2 = 2, 174
pixel_ratio_y = abs((y1[1] - y2[1])/(y1[0] - y2[0]) )
y_offset = y1[1] - ((y1[0]-1)*pixel_ratio_y)
y_ = lambda y : (y + y_offset)/pixel_ratio_y

pixel_ratio = abs((x1[1] - x2[1])/(x1[0] - x2[0]) )
x_offset = x1[1] - ((x1[0]-1)*pixel_ratio)
x_ = lambda x : (x + x_offset)/pixel_ratio
print("    (", x_(16), ",", y_(10)   ,",", y_(0)   , ")" )
print("    (", x_(52), ",", y_(75)   ,",", y_(36/2), ")" )
print("    (", x_(120), ",", y_(136) ,",", y_(82/2), ")" )
print("    (", x_(191), ",", y_(138) ,",", y_(127/2), ")")
print("    (", x_(295), ",", y_(154) ,",", y_(102/2), ")")
print("    (", x_(363), ",", y_(170) ,",", y_(100/2), ")")

print("Cheetah ")
x1 = 0.000, 19
x2 = 0.010, 363
y1 = 1, 11
y2 = 3, 178
pixel_ratio_y = abs((y1[1] - y2[1])/(y1[0] - y2[0]) )
y_offset = y1[1] - ((y1[0]-1)*pixel_ratio_y)
y_ = lambda y : (y + y_offset)/pixel_ratio_y

pixel_ratio = abs((x1[1] - x2[1])/(x1[0] - x2[0]) )
x_offset = x1[1] - ((x1[0]-1)*pixel_ratio)
x_ = lambda x : (x + x_offset)/pixel_ratio
print("    (", x_(19), ",", y_(11)   ,",", y_(0)   , ")" )
print("    (", x_(51), ",", y_(109)  ,",", y_(0)   , ")" )
print("    (", x_(119), ",", y_(171) ,",", y_(36/2), ")" )
print("    (", x_(189), ",", y_(182) ,",", y_(30/2), ")" )
print("    (", x_(294), ",", y_(195) ,",", y_(43/2), ")" )
print("    (", x_(363), ",", y_(171) ,",", y_(75/2), ")" )

print("Walker")
x1 = 0.000, 19
x2 = 0.010, 363
y1 = 2, 81
y2 = 4, 255
pixel_ratio_y = abs((y1[1] - y2[1])/(y1[0] - y2[0]) )
y_offset = y1[1] - ((y1[0]-1)*pixel_ratio_y)
y_ = lambda y : (y + y_offset)/pixel_ratio_y

pixel_ratio = abs((x1[1] - x2[1])/(x1[0] - x2[0]) )
x_offset = x1[1] - ((x1[0]-1)*pixel_ratio)
x_ = lambda x : (x + x_offset)/pixel_ratio
print("    (", x_(16), ",", y_(10)   ,",", y_(0)   , ")" )
print("    (", x_(104), ",", y_(114) ,",", y_(0)   , ")" )
print("    (", x_(191), ",", y_(142) ,",", y_(13/2), ")" )
print("    (", x_(277), ",", y_(163) ,",", y_(13/2), ")" )
print("    (", x_(363), ",", y_(20)  ,",", y_(23/2), ")" )